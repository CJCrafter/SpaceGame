// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;

// Other arguments
float2 _PixelOffset;
float4 _DirectionalLight;

// Skybox stuff
Texture2D<float4> _SkyboxTexture;
SamplerState sampler_SkyboxTexture;

static const float PI = 3.1415926;


// * ----- CODE STARTS HERE ----- * //


struct Ray {
    float3 origin;
    float3 direction;
    float3 energy;
};

struct RayHit {
    float3 position;
    float distance;
    float3 normal;
};

// No constructors ini hlsl
Ray CreateRay(float3 origin, float3 direction) {
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    ray.energy = float3(1, 1, 1);
    return ray;
}

Ray CreateRay(float2 uv) {
    float3 origin = mul(_CameraToWorld, float4(0, 0, 0, 1)).xyz;
    float3 direction = mul(_CameraInverseProjection, float4(uv, 0, 1)).xyz;
    direction = mul(_CameraToWorld, float4(direction, 0)).xyz;
    direction = normalize(direction);

    return CreateRay(origin, direction);
}

RayHit CreateRayHit() {
    RayHit hit;
    hit.position = float3(0, 0, 0);
    hit.distance = 100000;
    hit.normal = float3(0, 0, 0);
    return hit;
}

void IntersectGround(Ray ray, inout RayHit hit) {
    float t = -ray.origin.y / ray.direction.y;
    if (t > 0 && t < hit.distance) {
        hit.distance = t;
        hit.position = ray.origin + t * ray.direction;
        hit.normal = float3(0, 1, 0);
    }
}

void IntersectSphere(Ray ray, inout RayHit hit, float4 sphere) {
    // Calculate distance along the ray where the sphere is intersected
    float3 d = ray.origin - sphere.xyz;
    float p1 = -dot(ray.direction, d);
    float p2sqr = p1 * p1 - dot(d, d) + sphere.w * sphere.w;
    if (p2sqr < 0)
        return;
    float p2 = sqrt(p2sqr);
    float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2;
    if (t > 0 && t < hit.distance) {
        hit.distance = t;
        hit.position = ray.origin + t * ray.direction;
        hit.normal = normalize(hit.position - sphere.xyz);
    }
}

RayHit Trace(Ray ray) {
    RayHit hit = CreateRayHit();
    IntersectGround(ray, hit);

    float delta = 1.5;
    for (int x = -10; x < 10; x++) {
        //for (int y = -10; y < 10; y++) {
            for (int z = -10; z < 10; z++) {
                float3 pos = float3(x, 2, z) * delta;
                IntersectSphere(ray, hit, float4(pos, 0.75));
            }
        //}    
    }
    
    //IntersectSphere(ray, hit, float4(0, 0, 0, 1));
    return hit;
}

float3 Shade(inout Ray ray, RayHit hit) {
    if (hit.distance < 100000) {
        //float3 specular = float3(1.0, 0.78, 0.34);
        float3 specular = float3(0.04, 0.04, 0.04);
        ray.origin = hit.position + hit.normal + 0.001;
        ray.direction = reflect(ray.direction, hit.normal);
        ray.energy *= specular;

        // Shadow test ray
        bool shadow = false;
        Ray shadowRay = CreateRay(hit.position + hit.normal * 0.001f, -1 * _DirectionalLight.xyz);
        RayHit shadowHit = Trace(shadowRay);
        if (shadowHit.distance != 100000)
        {
            return float3(0.0f, 0.0f, 0.0f);
        }
        
        float3 albedo = float3(0.8f, 0.8f, 0.8f);
        return saturate(dot(hit.normal, _DirectionalLight.xyz) * -1) * _DirectionalLight.w * albedo;
    }

    // Sky does no reflections
    ray.energy = 0;
    
    // This samples from the skybox based on the direction
    float theta = acos(ray.direction.y) / -PI;
    float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5;
    return _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0).xyz;
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID) {
    uint width;
    uint height;
    Result.GetDimensions(width, height);

    float2 uv = float2((id.xy + _PixelOffset) / float2(width, height) * 2 - 1);
    Ray ray = CreateRay(uv);
    
    float3 result = float3(0, 0, 0);
    for (int i = 0; i < 8; i++) {
        RayHit hit = Trace(ray);
        result += ray.energy * Shade(ray, hit);

        if (!any(ray.energy))
            break;
    }
    
    Result[id.xy] = float4(result, 1);
}
