#pragma kernel CSMain
#include "Assets/Shaders/Noise.cginc"

struct NoiseSettings {
    int seed;
    float3 center;
    float frequency;
    float amplitude;
    uint layers;
    float attenuation;
    float rigidPower;
};

struct Crater {
    float size;
    float floorHeight;
    float smoothingFactor;
};

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
StructuredBuffer<float3> _vertices;
StructuredBuffer<NoiseSettings> _settings;
RWStructuredBuffer<float> Result;
uint _numVertices;
uint _numSettings;

StructuredBuffer<Crater> _craters;
uint _numCraters;


float Random(uint seed) {
    seed ^= 2747636419u;
    seed *= 2654435769u;
    seed ^= seed >> 16;
    seed *= 2654435769u;
    seed ^= seed >> 16;
    seed *= 2654435769u;
    return float(seed) / 4294967295.0; // 2^32-1
}

float CalculateElevation(float3 vertex, NoiseSettings settings) {
    float noise = 0;
    float attenuation = 1.0;
    
    for (uint i = 0; i < settings.layers; i++) {

        // We need an "offset" to sample the noise to make sure
        // we aren't sampling the same noise over and over again
        int seed = settings.seed;
        float3 offset = float3(Random(seed + i * 11), Random(seed + i * 22), Random(seed + i * 33));
        offset *= 1000;
        
        float local = snoise(vertex * settings.frequency + settings.center + offset);
        local = (local + 1.0) / 2.0;
        
        // 1 - abs(noise) = rigid
        if (settings.rigidPower != 0.0) {
            local = 1 - abs(local);
            local = pow(local, settings.rigidPower);
        }
        
        local *= settings.amplitude * attenuation;
        noise += local;
        
        attenuation *= settings.attenuation;
    }

    return noise;
} 

[numthreads(512,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID) {
    if (id.x >= _numVertices)
        return;
    
    float3 vertex = _vertices[id.x];

    float elevation = 0;
    for (uint i = 0; i < _numSettings; i++) {
        float local = CalculateElevation(normalize(vertex), _settings[i]);
        elevation += local; 
    }
    
    Result[id.x] = max(0, elevation);
}
